#****************************************************************************
#
#    GNU/       __  __       _         __ _ _      
#      /gmake  |  \/  | __ _| | _____ / _(_) | ___ 
#     /        | |\/| |/ _` | |/ / _ \ |_| | |/ _ \
#    /BSD-2c   | |  | | (_| |   <  __/  _| | |  __/
#              |_|  |_|\__,_|_|\_\___|_| |_|_|\___|
#
#                           SKUNKDB
#
#   FILENAME: Makefile  AUTHOR: "Brig Young" 
#   COPYRIGHT: "2016 Brig Young" LICENSE: "BSD-2c, see LICENSE"         
#   PURPOSE: "Make, Build, Test and Maintain skunkdb"               
#
#   This file probably requires GNU gmake.
#****************************************************************************

#****************************************************************************
#  Documentation 
#         _                                       _        _   _             
#      __| | ___   ___ _   _ _ __ ___   ___ _ __ | |_ __ _| |_(_) ___  _ __  
#     / _` |/ _ \ / __| | | | '_ ` _ \ / _ \ '_ \| __/ _` | __| |/ _ \| '_ \ 
#    | (_| | (_) | (__| |_| | | | | | |  __/ | | | || (_| | |_| | (_) | | | |
#     \__,_|\___/ \___|\__,_|_| |_| |_|\___|_| |_|\__\__,_|\__|_|\___/|_| |_|
#
#    This is a hand rolled Makefile and is not generated by Autotools
#
#     TARGETS: (Default is  skunkdb)
#
#         all: Depends on skunkdb and sqlite
#     skunkdb: Builds the skunkdb plugin 
#      sqlite: Builds the sqlite library and CLI 
#        test: Builds and runs all tests with PASS|FAIL output
#       clean: Removes intermediary files leaves binaries
#   distclean: Removes intermediarries and output files
#
#****************************************************************************

#****************************************************************************
#  Compiler Options                       _   _ 
#          __ _  ___ ___       ___  _ __ | |_(_) ___  _ __  ___ 
#         / _` |/ __/ __|     / _ \| '_ \| __| |/ _ \| '_ \/ __|
#        | (_| | (_| (__     | (_) | |_) | |_| | (_) | | | \__ \
#         \__, |\___\___|     \___/| .__/ \__|_|\___/|_| |_|___/
#         |___/                    |_|                         
#
#     NOTE: This is the correct place to do temporary build changes:
#
#****************************************************************************

### gcc is the standard compiler for SiOO, all extensions are assumed.
### TODO config for presence of gcc, abort if not found
CC = gcc

# STANDARDS
# These specify which version of the C standard to use AND options that
# control the generation of code by the compiler

### Use GNU C 2011 extensions with POINTER struct return
G_ISO11P_PSR_STD = -std=g11 -fpcc_struct_return

### Use GNU C 1999 extensions with POINTER struct return
G_ISO99P_PSR_STD = -std=g99 -fpcc_struct_return

### Use GNU 1989/1990 extensions with POINTER struct return
G_ANSI89P_PSR_STD = -std=g89 -fpcc_struct_return 

### Use ISO C 2011 standard with with POINTER struct return
C_ISO11P_PSR_STD = -std=c11 --pedantic -fpcc_struct_return

### Use ISO C 1999 standard with POINTER struct return
C_ISO99P_PSR_STD = -std=c99 --pedantic -fpcc_struct_return

### Use C 1989/1990 ANSI Standard with POINTER struct return
C_ANSI89P_PSR_STD = -std=c89 --ansi --pedantic -fpcc_struct_return 

C_STANDARD = C_ISO99P_PSR_STD



### GCC FLAGS
# Add Optimized versions !! 
### This is the basic invocation, debug and all warnings
GCC_GW_FLAGS = -g -Wall
### Use these flags to build data for lcov/gcov usage:
GCC_GWCOVER_FLAGS = -g -Wall -fprofile-arcs -ftest-coverage 

GCC_FLAGS = GCC_GW_FLAGS


#****************************************************************************
#  Variables                   _       _     _           
#             __   ____ _ _ __(_) __ _| |__ | | ___  ___ 
#             \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|
#              \ V / (_| | |  | | (_| | |_) | |  __/\__ \
#               \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
#                                           
#****************************************************************************

### Define any tools we are using and flag variables
RM = rm
RM_FLAGS = -f

SRC_DIR = .
INCLUDE_DIR = .
OUTPUT_DIR = .



# Setup Build flags for SQLite3
DEFINE_SQLITE_FLAGS = \
-DHAVE_LINENOISE


INCLUDE_FLAGS =	\
# -I$(INCLUDE_DIR) \

CFLAGS = \
$(GCC_FLAGS) \
$(C_STANDARD) \
$(DEFINE_SQLITE_FLAGS) \
$(INCLUDE_FLAGS) \


# Library specifications
MATH_LIBS =		-lieee -lm
LIBS =			$(KERNEL_LIB_SPEC)  -ldl \
                          $(MATH_LIBS) -lc

# We build all of the source files as individual compilation units and then
# we link the object files together with our external libraries
OBJS =	sqlite3.o

#****************************************************************************
#  Targets          _                       _       
#                __| |_ __ _ _ __ __ _  ___| |_ ___ 
#                \_  __/ _` | '__/ _` |/ _ \ __/ __|
#                  | || (_| | | | (_| |  __/ |_\__ \
#                   \__\__,_|_|  \__, |\___|\__|___/
#                              |___/              
#
#****************************************************************************

# DEFAULT targets, add any targets below or define your own.
all:	skunkdb

skunkdb: $(OBJS)
	$(CC) $(CFLAGS) -o sqlcli shell.o $(LIBS) 

sqlite3:	
	$(CC) $(CFLAGS) -o sqlcli shell.o $(LIBS) 


sqlite3.a: $(OBJS)
	$(AR) $(ARFLAGS) libSiOO.a $(OBJS)

tests: tests.o $(OBJS)
	$(CC) $(CFLAGS) -o tests tests.o $(OBJS) $(LIBS)


clean:
	$(RM) $(RM_FLAGS) core *.o *.gcno 

distclean: clean
#	$(RM) $(RM_FLAGS) 


testing:
# Foreach test passed, output " *PASS* Test_00N Description_string_for_test\n"
# If all tests are passed, output " *PASS* SiOO PASSES ALL TESTS\n"
	# ./SiOO cli/testing/test_001
	# ./SiOO cli/testing/test_002
	# ./SiOO cli/testing/test_003
	# ./SiOO cli/testing/test_004
	# ./SiOO cli/testing/test_005
	# ./SiOO cli/testing/test_006


