#****************************************************************************
#
#    GNU/       __  __       _         __ _ _      
#      /gmake  |  \/  | __ _| | _____ / _(_) | ___ 
#     /        | |\/| |/ _` | |/ / _ \ |_| | |/ _ \
#    /BSD-2c   | |  | | (_| |   <  __/  _| | |  __/
#              |_|  |_|\__,_|_|\_\___|_| |_|_|\___|
#
#                           SKUNKDB
#
#   FILENAME: Makefile  AUTHOR: "Brig Young" 
#   COPYRIGHT: "2016 Brig Young" LICENSE: "BSD-2c, see LICENSE"         
#   PURPOSE: "Make, Build, Test and Maintain skunkdb"               
#
#   This file probably requires GNU gmake.
#****************************************************************************

#****************************************************************************
#  Documentation 
#         _                                       _        _   _             
#      __| | ___   ___ _   _ _ __ ___   ___ _ __ | |_ __ _| |_(_) ___  _ __  
#     / _` |/ _ \ / __| | | | '_ ` _ \ / _ \ '_ \| __/ _` | __| |/ _ \| '_ \ 
#    | (_| | (_) | (__| |_| | | | | | |  __/ | | | || (_| | |_| | (_) | | | |
#     \__,_|\___/ \___|\__,_|_| |_| |_|\___|_| |_|\__\__,_|\__|_|\___/|_| |_|
#
#    This is a hand rolled Makefile and is not generated by Autotools
#
#     TARGETS: (Default is  skunkdb)
#
#         all: Depends on skunkdb and sqlite
#     skunkdb: Builds the skunkdb plugin 
#      sqlite: Builds the sqlite library and CLI 
#        test: Builds and runs all tests with PASS|FAIL output
#       clean: Removes intermediary files leaves binaries
#   distclean: Removes intermediarries and output files
#
#****************************************************************************

#****************************************************************************
#  Compiler Options                       _   _ 
#          __ _  ___ ___       ___  _ __ | |_(_) ___  _ __  ___ 
#         / _` |/ __/ __|     / _ \| '_ \| __| |/ _ \| '_ \/ __|
#        | (_| | (_| (__     | (_) | |_) | |_| | (_) | | | \__ \
#         \__, |\___\___|     \___/| .__/ \__|_|\___/|_| |_|___/
#         |___/                    |_|                         
#
#     NOTE: This is the correct place to do temporary build changes:
#
#****************************************************************************

### gcc is the standard compiler for SiOO, all extensions are assumed.
### TODO config for presence of gcc, abort if not found
CC = gcc

### Use C 2011 ISO standard, pointer struct returns and force compliance:
#C_STANDARD = -std=c11 -fpcc-struct-return --pedantic

### Use C 1999 ISO standard, pointer struct returns and force compliance:
C_STANDARD = -std=c99 -fpcc-struct-return --pedantic

### Dan's Original gcc call on the concurrency test:
# gcc -std=gnu99 test.c -o test -lsqlite3 -lpthread 



### Use C 1989 ANSI standard, pointer struct returns and force compliance:
#C_STANDARD = -std=c89 --ansi -fpcc-struct-return --pedantic

### Use GNU Wild West mode.
#C_STANDARD = -std=g11 -fpcc-struct-return

### This is the basic invocation, debug and all warnings
# GCC_FLAGS = -g -Wall

### Use these flags to build data for lcov/gcov usage:
# GCC_FLAGS = -g -Wall -fprofile-arcs -ftest-coverage 

### Define any tools we are using and flag variables
### This is where configuration can come it...
RM = rm
RM_FLAGS = -f


#****************************************************************************
#  Variables                   _       _     _           
#             __   ____ _ _ __(_) __ _| |__ | | ___  ___ 
#             \ \ / / _` | '__| |/ _` | '_ \| |/ _ \/ __|
#              \ V / (_| | |  | | (_| | |_) | |  __/\__ \
#               \_/ \__,_|_|  |_|\__,_|_.__/|_|\___||___/
#                                           
#****************************************************************************

# The location of the Soar kernel library, libsoarkernel.a

SRC_DIR =		.

# TODO: Is any of this CRUFT?
DEFINE_FLAGS = \
-DSTDC_HEADERS=1 \
-DHAVE_UNISTD_H=1 \

INCLUDE_FLAGS =	\

CFLAGS = \
$(GCC_FLAGS) \
$(C_STANDARD) \
$(DEFINE_FLAGS) \
$(INCLUDE_FLAGS) \

# Library specifications
MATH_LIBS = -lieee -lm

### This iswhere we setup and alternative C Library if we wish...
LIBS =	\
-lpthread
# MATH LIBS MUST BE ON THE END!
$(MATH_LIBS) -lc

# We build all of the source files as individual compilation units and then
# we link the object files together with our external libraries
OBJS =	

#****************************************************************************
#  Targets          _                       _       
#                __| |_ __ _ _ __ __ _  ___| |_ ___ 
#                \_  __/ _` | '__/ _` |/ _ \ __/ __|
#                  | || (_| | | | (_| |  __/ |_\__ \
#                   \__\__,_|_|  \__, |\___|\__|___/
#                              |___/              
#
#****************************************************************************

### TODO BUGBUG Targets are NOT correctly set-up, I'm not sure how exactly we want to build this...
all:	sqlite3 skunkdb

sqlite:	sqlite3.a

skunkdb:    $(OBJS)
	$(CC) $(CFLAGS) -o skunkdb $(OBJS) $(LIBS) 

tests:      $(OBJS)
	$(CC) $(CFLAGS) -o tests $(OBJS) $(LIBS)


clean:
	$(RM) $(RM_FLAGS) *.o *.gcno
	$(RM) $(RM_FLAGS) core *~

distclean: clean
	$(RM) $(RM_FLAGS) *.gcda *.a 
	
testing:
